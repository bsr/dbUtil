#!/usr/bin/perl -w
# dbUtil
# simple database structure moving from one host to another
# by Brent Rieck (bsr@spek.org)
#
# Based entirely on:
# WordPress Manager Script
# by Weston Ruter <weston@shepherd-interactive.com>
# Copyright 2010, Shepherd Interactive <http://shepherdinteractive.com/>
# 
# License: GPL 3.0 <http://www.gnu.org/licenses/gpl.html>
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

use warnings;
use strict;
use open ':utf8';
use Getopt::Std;
use Text::Wrap;
our $VERSION = '0.1';

my $help = <<HELP;
Simple DB mover, version $VERSION
  by Weston Ruter <bsr\@spek.org>
Usage: dbUtil <subcommand> [options] [args]
	facilitates database dumps and migrations between environments

Examples:
  dbUtil dumpdata <from environment>
  dbUtil pushdata <from environment> <to environment>

HELP

# All of the possible subcommands
my %subcommands = (
	dumpdata  => {
		description => "Dump the database from the specified environment into a
		                file {environment}.sql in the config db_dump_dir. Note
		                that the password is supplied to mysqldump as an
		                argument which is sent over the wire as cleartext.",
		arguments   => [
			{
				name => 'environment',
				optional => 1
			}
		]
	},
	pushdata  => {
		description => "Take the latest dump produced from the dumpdata
		                subcommand and push it to the supplied environment
		                after converting the HTTP host name from the source
		                dump to match the destination environment HTTP host
		                name. If the source_env is not provided, the
		                default_environment is assumed. Note that the password
		                is supplied to the mysql client as an argument which
		                is sent over the wire as cleartext.",
		arguments   => [
			{
				name => 'source_env',
				optional => 1
			},
			{
				name => 'dest_env',
				optional => 1
			}
		]
	},
	help      => {
		description => "Display this screen."
	},
);

# All of the valid options
my %options = (
	'c' => {
		value       => "configfile",
		default     => "./config.json",
		description => "The configuration file (defaults to ./config.json)"
	},
	'v' => {
		description => "Verbose mode"
	},
	'f' => {
		description => "Force the potentially destructive action to occur",
		subcommands => [qw( pushdata )]
	},
	'z' => {
		description => "Turn on compression for mysql connections"
	},
	's' => {
		description => "Show commands"
	}
);

# Get the invoked subcommand
my $subcommand = lc shift @ARGV;
die "First argument must be valid subcommand; run wp-manage.pl help\n" if $subcommand && not exists $subcommands{$subcommand};
$subcommand ||= 'help';

# Get the allowed option arguments for this subcommand
my $optstring = '';
foreach(keys %options){
	$optstring .= $_;
	$optstring .= ':' if exists $options{$_}->{value};
}

# Get the arguments
my %args;
getopts($optstring, \%args);


# Supply default argument option values
foreach my $switch (keys %options){
	if((not exists $args{$switch}) && (exists $options{$switch}->{default})){
		$args{$switch} = $options{$switch}->{default};
	}
}

# Detect illegal arguments
foreach my $switch (keys %args){
	if((exists $options{$switch}->{subcommands}) && !grep /$subcommand/, @{$options{$switch}->{subcommands}}){
		die "Illegal option '$switch' for subcommand '$subcommand'\n";
	}
}

# If no subcommand given, display help
if($subcommand eq 'help'){
	print $help;
	print "Available subcommands:\n";
	foreach my $subcommand (sort keys(%subcommands)){
		print "  $subcommand";
		my @switches;
		foreach my $switch (sort keys %options){
			next if exists $options{$switch}->{subcommands} && !grep /$subcommand/, @{$options{$switch}->{subcommands}};
			push @switches, "-$switch";
			push @switches, $options{$switch}->{value} if exists $options{$switch}->{value};
		}
		if($subcommand ne 'help'){
			print "[";
			print join " ", @switches;
			print "]  ";
		}
		if(exists $subcommands{$subcommand}->{arguments}){
			foreach my $argument (@{$subcommands{$subcommand}->{arguments}}){
				print(($argument->{optional} ? '[' . $argument->{name} . ']' : $argument->{name}) . " ");
			}
		}
		print "\n";
		my $desc = $subcommands{$subcommand}->{description};
		$desc =~ s{\n\s+}{ }g;
		print wrap("    ", "    ", $desc);
		print "\n\n";
	}
	
	print "All options:\n";
	foreach my $switch (sort keys(%options)){
		print "   -$switch";
		if(exists $options{$switch}->{value}){
			print " " . $options{$switch}->{value};
			if(exists $options{$switch}->{default}){
				print " (default: " . $options{$switch}->{default} . ")";
			}
		}
		print "\n";
		print wrap("     ", "     ", $options{$switch}->{description});
		print "\n";
		
	}
	exit;
}


# Load configuration file
my $configFile = $args{'c'}; #"./config.json"
use JSON;
-f $configFile or die "Config file does not exist $configFile\n";
open CONFIG, $configFile or die "Unable to read from $configFile\n";
my $config = decode_json(join '', <CONFIG>);
close CONFIG;

# Add config aliases
foreach my $env (values %{$config->{'environments'}}){
	$env->{'server_name'} = $env->{'http_host'} if (not exists $env->{'server_name'}) && exists $env->{'http_host'};
	$env->{'db_password'} = $env->{'db_pass'}   if (not exists $env->{'db_password'}) && exists $env->{'db_pass'};
}


#use Data::Dumper;
#print Dumper($config);
#my $environment = shift @ARGV || $config->{default_environment};
#print "\n##$environment##";
#exit;



my $svn_verbose_switch    .= exists $args{v} ? ' --verbose ' : '';
my $mysql_verbose_switch  .= exists $args{v} ? ' --verbose ' : '';
my $mysql_compress_switch .= exists $args{z} ? ' --compress ' : '';

use File::Basename;
sub in_array #http://www.go4expert.com/forums/showthread.php?t=8978
{
	my $search_for = shift;
	my %items = map {$_ => 1} @_; # create a hash out of the array values
	return exists $items{$search_for};
}

# Take the data from an environment and dump it out so it can be imported into each other environment
if($subcommand eq 'dumpdata' || $subcommand eq 'datadump'){
	#Get the destination environment
	my $environment = shift @ARGV || $config->{default_environment};
	die "Unrecognized environment '$environment'\n" if not exists $config->{'environments'}->{$environment};
	my $c = $config->{'environments'}->{$environment};
	
	#The servers other than primary are the destinations
	my @environments = keys(%{$config->{environments}});
	my @destinations = grep !/^$environment$/i, @environments;
	
	#Dump the source database
	my $db_dump_dir = ($config->{'db_dump_dir'} || 'db');
	my @options = (
		$mysql_verbose_switch,
		$mysql_compress_switch,		
		'--host "' . ($c->{db_host} || $c->{server_name}) . '"',
		'--user "' . $c->{db_user} . '"',
		'--password="' . $c->{db_password} . '"',
		'--quick',
		'--default-character-set=utf8',
		'--extended-insert=FALSE',
		'--delayed-insert=TRUE',
		'--complete-insert',
		'--skip-comments',
		'--no-create-db',
		'"' . $c->{db_name} . '"'
	);
	
	if(exists $config->{'db_tables'} && scalar @{$config->{'db_tables'}}){
		push @options, '"' . join('" "', @{$config->{'db_tables'}}) . '"';
	}
	
	##print 'mysqldump ' . join(' ', @options) . " > $db_dump_dir/$environment.sql\n";
	system('mysqldump ' . join(' ', @options) . " > $db_dump_dir/$environment.sql");
	system("$args{p} $db_dump_dir/$environment.sql") if exists $args{p} && $args{p};
	exit;
}

# Take the data from an environment and dump it out so it can be imported into each other environment
if($subcommand eq 'pushdata' || $subcommand eq 'datapush'){
	
	my $db_dump_dir = ($config->{'db_dump_dir'} || 'db');
	
	#Get the destination environment
	my($source_env, $dest_env);

	$source_env = shift @ARGV;
	$dest_env = shift @ARGV;

	die "Source environment (source_env) not provided\n" if !$source_env;
	die "Unrecognized environment '$source_env'\n" if not exists $config->{'environments'}->{$source_env};
	die "Destination environment (dest_env) not provided\n" if !$dest_env;
	die "Unrecognized environment '$dest_env'\n" if not exists $config->{'environments'}->{$dest_env};
	
	my $isForce = exists $args{f};
	my $cSource = $config->{'environments'}->{$source_env};
	my $cDest = $config->{'environments'}->{$dest_env};
	
	die "Error: In order to push to $dest_env, you must supply the -f parameter\n" if $cDest->{force_required} && !$isForce;
	die "Error: $db_dump_dir/$source_env.sql does not exist. Please run dumpdata $source_env\n" if not -f "$db_dump_dir/$source_env.sql";
	
	my $db_host = $cDest->{db_host} || $cDest->{server_name};
	system("$args{p} $db_dump_dir/~$dest_env.sql") if exists $args{p} && $args{p};
	system("mysql $mysql_verbose_switch $mysql_compress_switch -h $db_host -u $cDest->{db_user} --password=\"$cDest->{db_password}\" $cDest->{db_name} < $db_dump_dir/$source_env.sql");
	
	#Clean up
	#unlink("$db_dump_dir/~$dest_env.sql");
	exit;
}


